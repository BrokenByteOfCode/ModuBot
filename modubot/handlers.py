import os
import sys
import time
import psutil
import platform
import requests
from datetime import datetime
from pyrogram import filters
from . import config, utils

def get_help_text(category=None):
    help_categories = {
        "basic": {"title": "üîß –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏", "commands": [("`.status`", "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),("`.restart`", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),("`.addsudo`", "–î–æ–¥–∞—Ç–∏ SUDO –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"),("`.checkupdate`", "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"),("`.update`", "–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")]},
        "modules": {"title": "üì¶ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è–º–∏", "commands": [("`.modules`", "–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –º–æ–¥—É–ª—ñ"),("`.lsmodules`", "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ª–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ"),("`.repomodules`", "–ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥—É–ª—ñ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó"),("`.load <name>`", "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥—É–ª—å"),("`.unload <name>`", "–í–∏–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥—É–ª—å"),("`.reload <name>`", "–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥—É–ª—å")]},
        "manage": {"title": "üõ†Ô∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–æ–¥—É–ª—è–º–∏", "commands": [("`.getmodule <name>`", "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥—É–ª—å –∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é"),("`.updatemodule <name>`", "–û–Ω–æ–≤–∏—Ç–∏ –º–æ–¥—É–ª—å"),("`.createmodule <name>`", "–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–æ–¥—É–ª—å"),("`.delmodule <name>`", "–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–¥—É–ª—å")]}
    }
    
    if category and category in help_categories:
        cat = help_categories[category]
        text = f"**{cat['title']}**\n\n" + "\n".join([f"`{cmd}` - {desc}" for cmd, desc in cat['commands']])
        return text
    
    text = "**ü§ñ ModuBot Help**\n\n**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:**\n"
    text += "`.help basic`\n`.help modules`\n`.help manage`\n\n"
    text += "`.help all` - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏"
    
    if category == "all":
        text = "**ü§ñ ModuBot - –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏**\n\n"
        for _, cat_data in help_categories.items():
            text += f"**{cat_data['title']}**\n" + "\n".join([f"`{cmd}` - {desc}" for cmd, desc in cat_data['commands']]) + "\n\n"
    return text

def register_handlers(bot):
    sudo_filter = filters.user(bot.sudo_users)

    @bot.app.on_message(filters.command("help", ".") & sudo_filter)
    async def help_command(client, message):
        category = message.command[1] if len(message.command) > 1 else None
        await message.reply_text(get_help_text(category))

    @bot.app.on_message(filters.command("modules", ".") & sudo_filter)
    async def list_modules(client, message):
        if bot.module_system.loaded_modules:
            modules_list = "\n".join([f"‚Ä¢ `{mod}`" for mod in bot.module_system.loaded_modules.keys()])
            text = f"**üì¶ Loaded Modules ({len(bot.module_system.loaded_modules)}):**\n\n{modules_list}"
        else: text = "‚ùå No modules loaded."
        await message.reply_text(text)
    
    @bot.app.on_message(filters.command("lsmodules", ".") & sudo_filter)
    async def list_local_modules(client, message):
        local_modules = [d.name for d in config.MODULES_FOLDER.iterdir() if d.is_dir()]
        if not local_modules: return await message.reply_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤.")
        text = "**üóÇÔ∏è –õ–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ:**\n\n"
        for mod_name in sorted(local_modules):
            status = "‚úÖ" if mod_name in bot.module_system.loaded_modules else "‚ûñ"
            text += f"‚Ä¢ `{mod_name}` {status}\n"
        await message.reply_text(text)

    @bot.app.on_message(filters.command("repomodules", ".") & sudo_filter)
    async def list_repo_modules(client, message):
        status_msg = await message.reply_text("üåê –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫...")
        try:
            items = requests.get(config.MODULES_REPO_URL, timeout=10).json()
            repo_modules = [item['name'] for item in items if item['type'] == 'dir']
            text = "**‚òÅÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥—É–ª—ñ:**\n\n" + "\n".join([f"‚Ä¢ `{mod}`" for mod in sorted(repo_modules)])
            await status_msg.edit_text(text)
        except Exception as e: await status_msg.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    @bot.app.on_message(filters.command("restart", ".") & sudo_filter)
    async def restart_bot(client, message):
        msg = await message.reply_text("üîÑ Restarting...")
        with open(config.RESTART_TIME_FILE, 'w') as f:
            f.write(f"{time.time()}\n{msg.chat.id}\n{msg.id}")
        os.execl(sys.executable, sys.executable, *sys.argv)

    @bot.app.on_message(filters.command("addsudo", ".") & filters.me)
    async def add_sudo(client, message):
        if not message.reply_to_message: return await message.reply_text("‚ùå Reply to a user.")
        user_id = message.reply_to_message.from_user.id
        if user_id in bot.sudo_users: return await message.reply_text("‚ö†Ô∏è User already has SUDO.")
        bot.sudo_users.append(user_id)
        if utils.save_sudo_users(bot.sudo_users):
            await message.reply_text(f"‚úÖ User {user_id} has been given SUDO.")
        else: await message.reply_text("‚ùå Failed to save SUDO users.")

    @bot.app.on_message(filters.command("checkupdate", ".") & sudo_filter)
    async def check_update_command(client, message):
        msg = await message.reply_text("üîç Checking...")
        if bot.updater.check_for_updates(): await msg.edit_text("üÜï Update available. Use `.update`.")
        else: await msg.edit_text("‚úÖ You're on the latest version.")

    @bot.app.on_message(filters.command("update", ".") & sudo_filter)
    async def apply_update_command(client, message):
        msg = await message.reply_text("üîç Checking...")
        if bot.updater.check_for_updates():
            await msg.edit_text("üÜï Applying update and restarting...")
            bot.updater.apply_main_update()
        else: await msg.edit_text("‚úÖ No updates available.")

    @bot.app.on_message(filters.command(["createmodule", "delmodule", "getmodule", "updatemodule", "load", "unload", "reload"], ".") & sudo_filter)
    async def module_management(client, message):
        command = message.command[0]
        if len(message.command) != 2: return await message.reply_text(f"‚ùå Usage: `.{command} <module_name>`")
        module_name = message.command[1]

        if command == "createmodule": success, msg = bot.module_system.create_local_module(module_name)
        elif command == "delmodule": success, msg = bot.module_system.delete_local_module(module_name)
        elif command == "load": success, msg = bot.module_system.load_module(module_name)
        elif command == "unload": success, msg = bot.module_system.unload_module(module_name)
        elif command == "getmodule":
            status_msg = await message.reply_text(f"üì• Downloading `{module_name}`...")
            success, msg = bot.module_system.download_module(module_name)
            return await status_msg.edit_text(msg)
        elif command == "reload":
            status_msg = await message.reply_text(f"üîÑ Reloading `{module_name}`...")
            bot.module_system.unload_module(module_name)
            success, msg = bot.module_system.load_module(module_name)
            return await status_msg.edit_text(msg)
        elif command == "updatemodule":
            status_msg = await message.reply_text(f"üîÑ Updating `{module_name}`...")
            was_loaded = module_name in bot.module_system.loaded_modules
            if was_loaded: bot.module_system.unload_module(module_name)
            success, dl_msg = bot.module_system.download_module(module_name)
            if not success: return await status_msg.edit_text(dl_msg)
            if was_loaded:
                success, load_msg = bot.module_system.load_module(module_name)
                msg = f"‚úÖ Updated and reloaded." if success else f"‚úÖ Updated, but failed to reload: {load_msg}"
            else: msg = f"‚úÖ Updated."
            return await status_msg.edit_text(msg)

        await message.reply_text(msg)

    @bot.app.on_message(filters.command("status", ".") & sudo_filter)
    async def bot_status(client, message):
        uptime = datetime.now() - bot.start_time
        mem = psutil.virtual_memory()
        status_text = f"""**ü§ñ ModuBot Status**
**üë§ Owner:** {config.OWNER_NICKNAME}
**‚è± Uptime:** {str(uptime).split('.')[0]}
**üì¶ Modules:** {len(bot.module_system.loaded_modules)}
**üë• SUDO:** {len(bot.sudo_users)}

**üíª System:**
**CPU:** {psutil.cpu_percent()}% | **RAM:** {mem.percent}%
**Platform:** {platform.system()} {platform.release()}"""
        await message.reply_text(status_text)